# WebRTC SIP API - Kubernetes Deployment Configuration
# Complete setup for production deployment on Kubernetes

apiVersion: v1
kind: Namespace
metadata:
  name: webrtc-sip-api
  labels:
    name: webrtc-sip-api
    environment: production

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: webrtc-config
  namespace: webrtc-sip-api
data:
  NODE_ENV: "production"
  PORT: "3000"
  WS_PORT: "8080"
  LOG_LEVEL: "info"
  DB_PATH: "/app/data/calls.db"
  LOG_FILE: "/app/logs/app.log"
  CORS_ORIGIN: "*"
  API_RATE_LIMIT: "100"
  REDIS_URL: "redis://redis-service:6379"

---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: webrtc-secrets
  namespace: webrtc-sip-api
type: Opaque
data:
  # Base64 encoded values - replace with actual values
  JWT_SECRET: eW91ci1qd3Qtc2VjcmV0LWtleQ==  # your-jwt-secret-key
  REDIS_PASSWORD: cmVkaXMtcGFzc3dvcmQ=  # redis-password
  DB_ENCRYPTION_KEY: ZGItZW5jcnlwdGlvbi1rZXk=  # db-encryption-key

---
# PersistentVolumeClaim for data storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: webrtc-data-pvc
  namespace: webrtc-sip-api
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd  # Adjust based on your cluster

---
# PersistentVolumeClaim for logs
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: webrtc-logs-pvc
  namespace: webrtc-sip-api
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: webrtc-sip-api
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: webrtc-secrets
              key: REDIS_PASSWORD
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --requirepass
        - $(REDIS_PASSWORD)
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data-pvc

---
# Redis PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data-pvc
  namespace: webrtc-sip-api
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: standard

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: webrtc-sip-api
  labels:
    app: redis
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# WebRTC SIP API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webrtc-sip-api
  namespace: webrtc-sip-api
  labels:
    app: webrtc-sip-api
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: webrtc-sip-api
  template:
    metadata:
      labels:
        app: webrtc-sip-api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: webrtc-sip-api
        image: webrtc-sip-api:latest  # Replace with your image
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        - containerPort: 8080
          name: websocket
        envFrom:
        - configMapRef:
            name: webrtc-config
        env:
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: webrtc-secrets
              key: JWT_SECRET
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: webrtc-secrets
              key: REDIS_PASSWORD
        - name: DB_ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: webrtc-secrets
              key: DB_ENCRYPTION_KEY
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
        - name: logs-volume
          mountPath: /app/logs
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /api/v1/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: webrtc-data-pvc
      - name: logs-volume
        persistentVolumeClaim:
          claimName: webrtc-logs-pvc
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
# Service for WebRTC SIP API
apiVersion: v1
kind: Service
metadata:
  name: webrtc-sip-api-service
  namespace: webrtc-sip-api
  labels:
    app: webrtc-sip-api
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb  # For AWS
spec:
  selector:
    app: webrtc-sip-api
  ports:
  - name: http
    port: 80
    targetPort: 3000
    protocol: TCP
  - name: websocket
    port: 8080
    targetPort: 8080
    protocol: TCP
  type: LoadBalancer
  sessionAffinity: ClientIP  # Important for WebSocket connections

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: webrtc-sip-api-ingress
  namespace: webrtc-sip-api
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "86400"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "86400"
    nginx.ingress.kubernetes.io/websocket-services: webrtc-sip-api-service
    nginx.ingress.kubernetes.io/upstream-hash-by: "$binary_remote_addr"
    nginx.ingress.kubernetes.io/rate-limit: "100"
spec:
  tls:
  - hosts:
    - api.yourdomain.com  # Replace with your domain
    secretName: webrtc-tls-secret
  rules:
  - host: api.yourdomain.com  # Replace with your domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: webrtc-sip-api-service
            port:
              number: 80
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: webrtc-sip-api-service
            port:
              number: 8080

---
# HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: webrtc-sip-api-hpa
  namespace: webrtc-sip-api
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: webrtc-sip-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# PodDisruptionBudget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: webrtc-sip-api-pdb
  namespace: webrtc-sip-api
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: webrtc-sip-api

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: webrtc-sip-api-netpol
  namespace: webrtc-sip-api
spec:
  podSelector:
    matchLabels:
      app: webrtc-sip-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []  # Allow all outbound traffic for external APIs
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
    - protocol: UDP
      port: 53